setwd("/Users/aubrey/Documents/SHK/randomness-as-regularization/Treeinterpreter")
setwd("/Users/aubrey/Documents/SHK/Dropbox/Dingyi/Data/ti&shap_full/")
getwd()
setwd("/Users/aubrey/Documents/SHK/Dropbox/Dingyi/Data/ti&shap_full/")
getwd()
setwd("/Users/aubrey/Documents/SHK/Dropbox/Dingyi/Data/ti&shap_full")
getwd()
library(ggplot2)
dataname <- c('abalone', 'bike', 'boston', 'concrete', 'cpu', 'csm', 'fb', 'parkinsons','servo', 'solar','synthetic')
Cor_pearson <- c()
Cor_spearman <- c()
for(i in dataname){
ti <- read.csv(file = paste0('ti_',i,'.csv'))[,-c(1)]
shap <- read.csv(file = paste0('shap_',i,'.csv'))[,-c(1)]
for(j in colnames(ti)){
Cor_pearson <- c(Cor_pearson,as.numeric(cor(ti[j], shap[j])))
Cor_spearman <- c(Cor_spearman,as.numeric(cor(ti[j], shap[j])))
print(paste0("The pearson correlation of treeinterpreter and shap value in ",i," with regard to ", j, " is ", round(cor(ti[j], shap[j]), digits = 4)))
print(paste0("The spearman correlation of treeinterpreter and shap value in  ",i," with regard to ", j, " is ", round(cor(ti[j], shap[j], method = 'spearman'), digits = 4)))
temp <- data.frame(c(ti[j],shap[j]))
colnames(temp) <- c("ti","shap")
# Basic scatter plot
print(ggplot(temp, aes(x=ti, y=shap)) + geom_point() +
geom_smooth()+
geom_smooth(method='lm', color='red')+
labs(title=paste0("The scatter plot of treeinterpreter and shap value in ",i," with regard to ", j),
x=paste0("ti_",i,"_",j), y = paste0("shap_",i,"_",j)))
}
}
setwd("/Users/aubrey/Documents/SHK/Dropbox/Dingyi/Data/ti&shap_full")
getwd()
library(ggplot2)
dataname <- c('abalone', 'bike', 'boston', 'concrete', 'cpu', 'csm', 'fb', 'parkinsons','servo', 'solar','synthetic')
Cor_pearson <- c()
Cor_spearman <- c()
for(i in dataname){
ti <- read.csv(file = paste0('ti_',i,'.csv'))[,-c(1)]
shap <- read.csv(file = paste0('shap_',i,'.csv'))[,-c(1)]
for(j in colnames(ti)){
Cor_pearson <- c(Cor_pearson,as.numeric(cor(ti[j], shap[j])))
Cor_spearman <- c(Cor_spearman,as.numeric(cor(ti[j], shap[j])))
print(paste0("The pearson correlation of treeinterpreter and shap value in ",i," with regard to ", j, " is ", round(cor(ti[j], shap[j]), digits = 4)))
print(paste0("The spearman correlation of treeinterpreter and shap value in  ",i," with regard to ", j, " is ", round(cor(ti[j], shap[j], method = 'spearman'), digits = 4)))
temp <- data.frame(c(ti[j],shap[j]))
colnames(temp) <- c("ti","shap")
# Basic scatter plot
print(ggplot(temp, aes(x=ti, y=shap)) + geom_point() +
geom_smooth()+
geom_smooth(method='lm', color='red')+
labs(title=paste0("The scatter plot of treeinterpreter and shap value in ",i," with regard to ", j),
x=paste0("ti_",i,"_",j), y = paste0("shap_",i,"_",j)))
}
}
View(shap)
?write.csv
write.csv(Cor_pearson, file = "Cor_pearson")
# output the results
write.csv(Cor_pearson, file = "Cor_pearson.csv")
write.csv(Cor_pearson, file = "Cor_pearson.csv")
setwd("/Users/aubrey/Documents/SHK/Dropbox/SharedFile/Results/Results")
getwd()
setwd("/Users/aubrey/Documents/SHK/Dropbox/SharedFile/Results/Results")
getwd()
r2_all <- read.csv("data/boosting_r2_all.csv");
knitr::opts_chunk$set(echo = TRUE)
#library(ggstatsplot)
library(ggplot2)
r2_all <- read.csv("data/boosting_r2_all.csv");
setwd("/Users/aubrey/Documents/SHK/Dropbox/SharedFile/Results/Results/")
getwd()
r2_all <- read.csv("data/boosting_r2_all.csv")
r2_filtered <- read.csv("data/boosting_r2_filtered.csv")
r2_filtered <- read.csv("data/boosting_r2_filtered.csv"
)
r2_all = na.omit(r2_all[,2])
r2_filtered = na.omit(r2_filtered[,2])
n1=length(r2_all)
n2=length(r2_filtered)
r2_boost = cbind.data.frame(rho = c(r2_all,r2_filtered), Type = c(rep("all",n1), rep("80%",n2)))
dXGB = ggplot(r2_boost,aes(x=rho, fill=Type)) + geom_density(alpha=0.25, adjust = 0.6) + ggtitle("Boosted Trees") + xlab( expression(paste(rho)))
dXGB
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/aubrey/Documents/SHK/Dropbox/Dingyi/Data/ti&shap_full")
#library(ggstatsplot)
library(ggplot2)
r2_all <- scan("pearson_ti_shap_all.csv");n1=length(r2_all)
r2_filtered <- scan("pearson_ti_shap_filtered");n2=length(r2_filtered)
r2_rf = cbind.data.frame(rho = c(r2_all,r2_filtered), Type = c(rep("all",n1), rep("80%",n2)))
r2_all <- scan("pearson_ti_shap_all.csv");n1=length(r2_all)
r2_filtered <- scan("pearson_ti_shap_filtered.csv");n2=length(r2_filtered)
r2_rf = cbind.data.frame(rho = c(r2_all,r2_filtered), Type = c(rep("all",n1), rep("80%",n2)))
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv")
View(pearson_ti_shap_all)
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv",header = FALSE)
View(pearson_ti_shap_all)
?read.csv
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv")[,1]
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv")[,1];n1=length(r2_all)
pearson_ti_shap_filtered <- read.csv("pearson_ti_shap_filtered.csv")[,1];n2=length(r2_filtered)
pearson_ti_shap_rf = cbind.data.frame(rho = c(pearson_ti_shap_all,pearson_ti_shap_filtered), Type = c(rep("all",n1), rep("80%",n2)))
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv")[,1];n1=length(pearson_ti_shap_all)
pearson_ti_shap_filtered <- read.csv("pearson_ti_shap_filtered.csv")[,1];n2=length(pearson_ti_shap_filtered)
pearson_ti_shap_rf = cbind.data.frame(rho = c(pearson_ti_shap_all,pearson_ti_shap_filtered), Type = c(rep("all",n1), rep("80%",n2)))
dRF = ggplot(pearson_ti_shap_rf,aes(x=rho, fill=Type)) + geom_density(alpha=0.25, adjust = 0.6) + ggtitle("Random Forest for Regression") + xlab( expression(paste(rho)))
dRF
View(pearson_ti_shap_rf)
View(r2_boost)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/aubrey/Documents/SHK/Dropbox/Dingyi/Data/ti&shap_full")
#library(ggstatsplot)
library(ggplot2)
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv")[,2];n1=length(pearson_ti_shap_all)
pearson_ti_shap_all <- read.csv("pearson_ti_shap_all.csv")[,2];n1=length(pearson_ti_shap_all)
pearson_ti_shap_filtered <- read.csv("pearson_ti_shap_filtered.csv")[,2];n2=length(pearson_ti_shap_filtered)
pearson_ti_shap_rf = cbind.data.frame(rho = c(pearson_ti_shap_all,pearson_ti_shap_filtered), Type = c(rep("all",n1), rep("80%",n2)))
dRF = ggplot(pearson_ti_shap_rf,aes(x=rho, fill=Type)) + geom_density(alpha=0.25, adjust = 0.6) + ggtitle("Random Forest for Regression") + xlab( expression(paste(rho)))
dRF
